% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zz_ratmat_tools.R
\name{match_vectors}
\alias{match_vectors}
\title{Match Two Vectors}
\usage{
match_vectors(x, y = Conj(x))
}
\arguments{
\item{x, y}{two vectors of the same length, \eqn{p} say.}
}
\value{
A list with components 
\item{i,j}{two permutations, i.e. integer vectors of length \code{p} with unique entries.}
\item{dist}{numeric vector, \code{dist = abs(x[i]-y[j])}. By construction the entries 
            of \code{d} are sorted.}
\item{d}{numeric matrix with entries \code{d[k,l] = abs(x[k] - y[l])}.}
}
\description{
This function was originally part of the R-package \strong{rationalmatrices}.
\cr
Given two vectors \code{x,y} of the same length, the routine \code{match_vectors} returns two 
permutations \code{i,j} such that \code{x[i]} matches \code{y[j]} as best as possible. The 
procedure uses a simple, greedy search strategy. In the first step \code{i[1], j[1]} are chosen such 
that \code{abs(x[i[1]]-y[j[1]])} is equal to the minimum distance between the entries of \code{x} and \code{y}. 
Then the procedure iterates this search strategy with the remaining entries of \code{x} and \code{y}.
}
\examples{
# Match the roots of two polynomials a1 and a2
p = 5
a1 = rnorm(p+1)
a2 = a1 + rnorm(p+1)*(1e-6) # a2 is a "noisy" copy of a1
z1 = polyroot(a1)
z2 = polyroot(a2)
out = match_vectors(z1, z2)
print(cbind(z1[out$i], z2[out$j], out$dist))

# A polynomial with real coefficients has pairs of complex conjugate roots
# However, the roots returned by "polyroot" in general do not have this property!
# Match the roots and their complex conjugates
out = match_vectors(z1, Conj(z1))
print(cbind(out$i, out$j, out$dist, 
            Re(z1[out$i]), Re(Conj(z1)[out$j]), 
            Im(z1[out$i]), Im(Conj(z1)[out$j])))

}
\keyword{internal}
