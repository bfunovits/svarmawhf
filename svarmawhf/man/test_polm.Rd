% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zz_ratmat_tools.R
\name{test_polm}
\alias{test_polm}
\title{Create Test Polynomial Matrix}
\usage{
test_polm(
  dim = c(1, 1),
  degree = 0,
  random = FALSE,
  digits = NULL,
  col_end_matrix = NULL,
  value_at_0 = NULL,
  bzeroes = NULL,
  n.trials = 100
)
}
\arguments{
\item{dim}{two dimensional vector of non negative integers, determines the dimension of 
the polynomial matrix to be created. If the prescribed number of rows or number of columns 
is zero then an "empty" polynomial matrix is generated. In this case all 
parameters below are ignored.}

\item{degree}{desired degree(s), either a scalar, a vector or a matrix. In the matrix case 
\code{degree} prescribes the degrees of the entries of the polynomial matrix. 
A vector \code{degree} defines the column degrees of the matrix, i.e. 
the respective maximal degrees within the columns, and a scalar \code{degree} 
determines the maximum degree of all entries of the matrix. Of course 
\code{degree} has to be compatible with the parameter \code{dim}. 
If the desired degree is \eqn{-1} then a zero polynomial is generated and 
the parameters below are ignored.}

\item{random}{If TRUE the coefficents are generated by drawing from a normal distribution.
If FALSE then the coefficient of the \eqn{k}-th power \eqn{z^k} of 
the (i,j)-th entry is set equal to "\eqn{ijk}". In this case the 
parameters below are ignored!}

\item{digits}{integer, if non NULL then the randomly generated numbers are rounded to 
"digits" number of decimal places.}

\item{col_end_matrix}{desired column end matrix (or \code{NULL}).}

\item{value_at_0}{desired value of the polynomial at \eqn{z=0} (or \code{NULL}).}

\item{bzeroes}{lower bound for the moduli of the zeroes of the rational matrix (or NULL). 
This parameter is ignored for non-square matrices (m != n).}

\item{n.trials}{maximum number of trials.}
}
\value{
\code{\link{polm}} object, which represents the generated polynomial matrix.
}
\description{
This function was originally part of the R-package \strong{rationalmatrices}.
\cr
This simple tool creates (random) polynomial matrices for testing purposes.
}
\details{
Note that the desired parameters \code{value_at_0} and \code{column_end_matrix} 
may be in conflict to the desired degree(s). See the examples below.

The matrices \code{column_end_matrix} and \code{value_at_0} may contain \code{NA}'s. 
These entries are replaced by randomly generated numbers. 

The user may prescribe lower bounds for the moduli of the zeroes 
of the polynomial. In this case the procedure simply generates (up to \code{n.trials}) 
random matrices until a matrix is found which satisfies the constraint. The standard deviation 
of the normal distribution, which is used to generate the random entries, is decreased in each step. 
Of course this is a very crude method and it may fail or need a very large number of randomly 
generated matrices.
}
\examples{
### "empty" polynomials, number of rows or number of columns is zero. 
test_polm(dim = c(0,0))
test_polm(dim = c(0,2))
test_polm(dim = c(3,0))

### (3,3) polynomial of degree -1 (i.e. a(z)=0) 
test_polm(dim = c(3,3), degree = -1)

### (3,3) polynomial with degree 1 
test_polm(dim = c(3,3), degree = 1) \%>\% print(format = 'c')

### (3,3) polynomial with column degrees -1, 0 and 1 
test_polm(dim = c(3,3), degree = c(-1,0,1))  \%>\% print(format = 'c')

### random, (3,3) polynomial with prescribed degrees for each element 
deg = matrix(c(0, 1, 2,
               1,-1,-1,
               1, 1, 1), nrow = 3, ncol = 3, byrow = TRUE)
print(deg)

a = test_polm(dim = c(3,3), degree = deg, random = TRUE)
print(a, digits = 2, format = 'c')

### random, (3,3) polynomial with prescribed column degree and column end matrix
cm = matrix(NA_real_, nrow = 3, ncol = 3)
cm[lower.tri(cm, diag = FALSE)] = 0
a = test_polm(dim = c(3,3), degree = c(0,1,2), random = TRUE, 
              digits = 2, col_end_matrix = cm)
print(a, digits = 2, format = 'c')
print(degree(a, which = 'column'))
print(col_end_matrix(a))

### the parameters column_end_matrix and value_at_zero 
### may be in conflict with the prescribed degree(s). 

# E.g. if we set the second column of "cm" equal to zero
cm[, 2] = 0
a = test_polm(dim = c(3,3), degree = c(0,1,2), random = TRUE, 
              digits = 2, col_end_matrix = cm)
print(a, digits = 2, format = 'c')

# then the generated polynomial has column degrees 0,0,2 
# and the column end matrix is not upper triangular!
print(degree(a, which = 'column'))
print(col_end_matrix(a))

### here we set a(0) equal to the identity matrix and 
### require that a(z) has no zeroes within the unit circle
a = try(test_polm(dim = c(3,3), degree = 2, random = TRUE, 
        digits = 2, value_at_0 = diag(3), bzeroes = 1))
if (!inherits(a, 'try-error')) {
  print(a, digits = 2, format = 'c')
  print(abs(zeroes(a)))
}
}
