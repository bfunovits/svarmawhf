% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zz_rldm_tools.R
\name{test_armamod}
\alias{test_armamod}
\title{Create Test ARMA model}
\usage{
test_armamod(
  dim = c(1, 1),
  degrees = c(1, 1),
  b0 = NULL,
  sigma_L = NULL,
  digits = NULL,
  bpoles = NULL,
  bzeroes = NULL,
  n.trials = 100
)
}
\arguments{
\item{dim}{integer vector \code{c(m,n)}.}

\item{degrees}{integer vector \code{c(p,q)}.}

\item{b0}{\eqn{(m,n)} dimensional matrix (or \code{NULL}). See the details below.}

\item{sigma_L}{\eqn{(n,n)} dimensional matrix (or \code{NULL}). See the details below.}

\item{digits}{integer, if non NULL then the randomly generated numbers are rounded to
"digits" number of decimal places.}

\item{bpoles}{lower bound for the moduli of the poles of the corresponding transfer function (or NULL).}

\item{bzeroes}{lower bound for the moduli of the zeroes of the corresponding tranmsfer function (or NULL).
This parameter is ignored for non-square matrices (m != n).}

\item{n.trials}{maximum number of trials.}
}
\value{
\code{\link{armamod}} object, which represents the generated ARMA model.
}
\description{
This function was originally part of the R-package \strong{RLDM}.
\cr
This simple tool may be used to create a random ARMA model
\deqn{y_t + a_1 y_{t-1} + \cdots + a_p y_{t-p} = b_0 u_t + b_1 u_{t-1} + \cdots + b_q u_{t-q}}{
      y[t] + a[1] y[t-1] + ... + a[p] y[t-p] = b[0] u[t] + b[1] u[t-1] + ... + b[q] u[t-q]}
with given order \eqn{(p,q)}.
}
\details{
We require \eqn{m>0} and \eqn{p\geq 0}{p\ge 0}.

The \eqn{b_0}{b[0]} matrix defaults to a \eqn{(m,n)}-dimensional diagonal matrix
with ones on the diagonal (\code{diag(x=1, nrow = m, ncol = n)}). However, one may
also pass an arbitray (compatible) matrix to the procedure.
This matrix may contain \code{NA}'s, which then are replaced by random numbers.

The \eqn{sigma_L} matrix defaults to a \eqn{(n,n)}-dimensional lower, triangular matrix
However, one may also pass an arbitray (compatible) \eqn{sigma_L} matrix to the procedure.

The user may prescribe lower bounds for the moduli of the zeroes and/or poles of the transfer function
\deqn{k(z) = a^{-1}(z) b(z).}
In this case the procedure simply generates (up to n.trials) random models until a model is found
which satisfies the constraint. The standard deviation of the normal distribution, which is used to
generate the random entries, is decreased in each step. Of course this is a very crude method and
it may fail or need a very large number of randomly generated matrices.
}
\examples{
### generate a random ARMA(1,1) model (with two outputs)
### we require that the model is stable and minimum phase
model = try(test_armamod(dim = c(2,2), degrees = c(1,1), digits = 2, bpoles = 1, bzeroes = 1))
if (!inherits(model, 'try-error')) {
   print(model)
   print(abs(poles(model$sys)))
   print(abs(zeroes(model$sys)))
}
}
