% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zz_ratmat_tools.R
\name{test_lmfd}
\alias{test_lmfd}
\title{Create Test Rational Matrix in LMFD Form}
\usage{
test_lmfd(
  dim = c(1, 1),
  degrees = c(1, 1),
  digits = NULL,
  bpoles = NULL,
  bzeroes = NULL,
  n.trials = 100
)
}
\arguments{
\item{dim}{integer vector \code{c(m,n)}.}

\item{degrees}{integer vector \code{c(p,q)}.}

\item{digits}{integer, if non NULL then the randomly generated numbers are rounded to 
"digits" number of decimal places.}

\item{bpoles}{lower bound for the moduli of the poles of the rational matrix (or NULL).}

\item{bzeroes}{lower bound for the moduli of the zeroes of the rational matrix (or NULL). 
This parameter is ignored for non-square matrices (m != n).}

\item{n.trials}{maximum number of trials.}
}
\value{
\code{\link{lmfd}} object, which represents the generated rational matrix \eqn{x(z)} in 
        LMFD form.
}
\description{
This function was originally part of the R-package \strong{rationalmatrices}.
\cr
This simple tool may be used to create a random, \eqn{(m,n)}-dimensional, rational matrix in 
LMFD form 
\deqn{x(z)=a^{-1}(z) b(z)}{x(z) = a^{-1}(z) b(z)}
The degrees of the polynomials \eqn{a(z), b(z)} is denoted with \eqn{p} and \eqn{q} respectively.
}
\details{
We require \eqn{m>0} and \eqn{p\geq 0}{p\ge 0}. The left factor \eqn{a(z)} 
is normalized as \eqn{a(0)=I_m}{a(0)=I} where \eqn{I_m}{I} denotes 
the \eqn{(m,m)}-dimensional identity matrix.  

The user may prescribe lower bounds for the moduli of the zeroes and/or poles of the rational matrix.
In this case the procedure simply generates (up to n.trials) random matrices until a matrix is found 
which satisfies the constraint. The standard deviation of the normal distribution, which is used to 
generate the random entries, is decreased in each step. Of course this is a very crude method and 
it may fail or need a very large number of randomly generated matrices.
}
\examples{
### generate a random (2 x 2) rational matrix in LMFD form with degrees p=1 and q =1
### we require that the matrix has no poles and no zeroes within the unit circle!
x = try(test_lmfd(dim = c(2,2), degrees = c(1,1), digits = 2, bpoles = 1, bzeroes = 1))
if (!inherits(x, 'try-error')) {
   print(x)
   print(abs(poles(x)))
   print(abs(zeroes(x)))
}
}
