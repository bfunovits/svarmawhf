% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zz_rldm_print_methods.R
\name{as_txt_scalarfilter}
\alias{as_txt_scalarfilter}
\title{Coerce Scalar Polynomial Filters to Character Strings}
\usage{
as_txt_scalarfilter(
  coefs,
  syntax = c("txt", "TeX", "expression"),
  x = "z",
  t = "t"
)
}
\arguments{
\item{coefs}{(numeric) vector of coefficients.}

\item{syntax}{(character string) determines the format of the output string.}

\item{x}{(character string) names the "input" series.}

\item{t}{(character string) names the "time-index".}
}
\value{
character string.
}
\description{
This function was originally part of the R-package \strong{RLDM}.
\cr
This utility coerces a scalar polynomial filter (given by the vector
of coefficients) to a character string. The following "formats" are implemented.
\code{syntax = "txt"} returns a simple text representation,
\code{syntax = "TeX"} renders the coefficients to string in "TeX" syntax and
\code{syntax = "expression"} gives a string which may be rendered to
an \code{R} expression with \code{\link[base]{parse}}. This expression
may be used to evaluate the filter and for annotating plots,
see \code{\link[grDevices]{plotmath}} and the examples below.
}
\examples{
coefs = c(1, 2.3, 0, -1, 0)

as_txt_scalarfilter(coefs, syntax = 'txt', x = 'x', t = 't')
as_txt_scalarfilter(coefs, syntax = 'TeX', x = 'x', t = 's')
as_txt_scalarfilter(coefs, syntax = 'expression', x = 'x', t = 'k')

\dontrun{
# the case syntax = "expression" may be used e.g. as follows

# make_filterfun creates a "closure" which computes the filter-output
# note that this simple version does not work for zero filters!
make_filterfun = function(coefs) {
  p = length(coefs) - 1
  expr = parse(text = as_txt_scalarfilter(coefs, 'expression', 'x', 't'))
  fun = function(x, t) {
    # x, t must be vectors
    y = rep(NA_real_, length(t))
    t0 = t
    y = rep(NA_real_, length(t))

    i = ((t0 > p) & (t0 <= length(x)))
    t = t0[i]
    if (any(i)) y[i] = eval(expr)

    return(y)
  }
  return(fun)
}

coefs = rep(1, 4) / 4  # represents a moving average of length 4.
a = make_filterfun(coefs)
u = rnorm(100)       # input series
a(u, 1)    # return the value of the output series at t = 1
           # this value is not defined due to missing initial values
a(u, 1:10) # return the values of the output series at t = 1,..,10

# create a plot
plot(1:length(u), u, type = 'n', xlab = 'time', ylab = '')
grid()
lines(1:length(u), u, col = 'black', lwd = 1)
lines(1:length(u), a(u, 1:length(u)), col = 'red', lwd = 2)
legend('topright', bty = 'n',
       fill = c('black', 'red'),
       legend = c(expression(u[t]),
                  parse(text = paste('x[t] == ',
                     as_txt_scalarfilter(coefs, 'expression', 'u','t')))) )
}
}
\seealso{
\code{\link{as_txt_scalarpoly}} and \code{\link{as_tex_matrixfilter}}.
}
