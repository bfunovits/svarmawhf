// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/svarmawhf.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_residuals
arma::mat get_residuals(const arma::mat& data_in, const arma::mat& polm_ar, arma::mat& polm_ma_bwd, const arma::mat& polm_ma_fwd, const arma::uword& kappa, const arma::uword& k);
static SEXP _svarmawhf_get_residuals_try(SEXP data_inSEXP, SEXP polm_arSEXP, SEXP polm_ma_bwdSEXP, SEXP polm_ma_fwdSEXP, SEXP kappaSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data_in(data_inSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type polm_ar(polm_arSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type polm_ma_bwd(polm_ma_bwdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type polm_ma_fwd(polm_ma_fwdSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_residuals(data_in, polm_ar, polm_ma_bwd, polm_ma_fwd, kappa, k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _svarmawhf_get_residuals(SEXP data_inSEXP, SEXP polm_arSEXP, SEXP polm_ma_bwdSEXP, SEXP polm_ma_fwdSEXP, SEXP kappaSEXP, SEXP kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_svarmawhf_get_residuals_try(data_inSEXP, polm_arSEXP, polm_ma_bwdSEXP, polm_ma_fwdSEXP, kappaSEXP, kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// solve_ARMA_cpp
void solve_ARMA_cpp(const arma::mat& a, const arma::mat& b, const arma::mat& u, arma::mat& y, int t0);
static SEXP _svarmawhf_solve_ARMA_cpp_try(SEXP aSEXP, SEXP bSEXP, SEXP uSEXP, SEXP ySEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type t0(t0SEXP);
    solve_ARMA_cpp(a, b, u, y, t0);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _svarmawhf_solve_ARMA_cpp(SEXP aSEXP, SEXP bSEXP, SEXP uSEXP, SEXP ySEXP, SEXP t0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_svarmawhf_solve_ARMA_cpp_try(aSEXP, bSEXP, uSEXP, ySEXP, t0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _svarmawhf_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::mat(*get_residuals)(const arma::mat&,const arma::mat&,arma::mat&,const arma::mat&,const arma::uword&,const arma::uword&)");
        signatures.insert("void(*solve_ARMA_cpp)(const arma::mat&,const arma::mat&,const arma::mat&,arma::mat&,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _svarmawhf_RcppExport_registerCCallable() { 
    R_RegisterCCallable("svarmawhf", "_svarmawhf_get_residuals", (DL_FUNC)_svarmawhf_get_residuals_try);
    R_RegisterCCallable("svarmawhf", "_svarmawhf_solve_ARMA_cpp", (DL_FUNC)_svarmawhf_solve_ARMA_cpp_try);
    R_RegisterCCallable("svarmawhf", "_svarmawhf_RcppExport_validate", (DL_FUNC)_svarmawhf_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_svarmawhf_get_residuals", (DL_FUNC) &_svarmawhf_get_residuals, 6},
    {"_svarmawhf_solve_ARMA_cpp", (DL_FUNC) &_svarmawhf_solve_ARMA_cpp, 5},
    {"_svarmawhf_RcppExport_registerCCallable", (DL_FUNC) &_svarmawhf_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_svarmawhf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
